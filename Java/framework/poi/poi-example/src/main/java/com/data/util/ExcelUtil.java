package com.data.util;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;

/**
 * excel took bulk export
 * 
 * @author github.com/zhdh
 *
 */
public class ExcelUtil {

	/***
	 * 工作簿
	 */
	private static HSSFWorkbook workbook;

	/***
	 * sheet
	 */
	private static HSSFSheet sheet;
	/***
	 * 标题行开始位置
	 */
	private static final int TITLE_START_POSITION = 0;

	/***
	 * 时间行开始位置
	 */
	private static final int DATEHEAD_START_POSITION = 1;

	/***
	 * 表头行开始位置
	 */
	private static final int HEAD_START_POSITION = 2;

	/***
	 * 文本行开始位置
	 */
	private static final int CONTENT_START_POSITION = 3;

	/**
	 * @param dataList
	 *            对象集合
	 * @param titleMap
	 *            表头信息（对象属性名称->要显示的标题值)[按顺序添加]
	 * @param sheetName
	 *            sheet名称和表头值
	 */
	public static void excelExport(List<?> dataList, Map<String, String> titleMap, String sheetName) {
		// 初始化workbook
		initHSSFWorkbook(sheetName);
		// 标题行
		// createTitleRow(titleMap, sheetName);
		// 时间行
		// createDateHeadRow(titleMap);
		// 表头行
		createHeadRow(titleMap);
		// 文本行
		createContentRow(dataList, titleMap);
		// 设置列宽
		// fixedSizeColumn(titleMap.size());
		// 自动列宽
		autoSizeColumn(titleMap.size());
		// 写入处理结果
		try {
			// 生成UUID文件名称
			UUID uuid = UUID.randomUUID();
			String filedisplay = uuid + ".xls";
			// 如果web项目，1、设置下载框的弹出（设置response相关参数)；2、通过httpservletresponse.getOutputStream()获取
			OutputStream out = new FileOutputStream("D:\\" + filedisplay);
			workbook.write(out);
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static HSSFWorkbook excelExport(List<?> dataList, Map<String, String> titleMap, String sheetName,
			String fileName) {
		// 初始化workbook
		initHSSFWorkbook(sheetName);
		// 标题行
		// createTitleRow(titleMap, sheetName);
		// 时间行
		// createDateHeadRow(titleMap);
		// 表头行
		createHeadRow(titleMap);
		// 文本行
		createContentRow(dataList, titleMap);
		// 设置列宽
		fixedSizeColumn(titleMap.size());
		// 写入处理结果
		/*
		 * try { //生成UUID文件名称 String filedisplay = fileName + ".xls";
		 * //如果web项目，1、设置下载框的弹出（设置response相关参数)；2、通过httpservletresponse.getOutputStream(
		 * )获取 //OutputStream out = new FileOutputStream("D:\\" + filedisplay);
		 * 
		 * // 写入 //workbook.write(out); //out.close(); return workbook; } catch
		 * (Exception e) { e.printStackTrace(); }
		 */
		return workbook;
	}

	/***
	 *
	 * @param sheetName
	 *            sheetName
	 */
	private static void initHSSFWorkbook(String sheetName) {
		workbook = new HSSFWorkbook();
		sheet = workbook.createSheet(sheetName);
	}

	/**
	 * 生成标题（第零行创建）
	 *
	 * @param titleMap
	 *            对象属性名称->表头显示名称
	 * @param sheetName
	 *            sheet名称
	 */
	private static void createTitleRow(Map<String, String> titleMap, String sheetName) {
		CellRangeAddress titleRange = new CellRangeAddress(0, 0, 0, titleMap.size() - 1);

		sheet.addMergedRegion(titleRange);

		HSSFRow titleRow = sheet.createRow(TITLE_START_POSITION);
		// 设置行高
		titleRow.setHeight((short) 350);
		HSSFCell titleCell = titleRow.createCell(TITLE_START_POSITION);
		titleCell.setCellValue(sheetName);
	}

	/**
	 * 创建时间行（第一行创建）
	 *
	 * @param titleMap
	 *            对象属性名称->表头显示名称
	 */
	private static void createDateHeadRow(Map<String, String> titleMap) {
		CellRangeAddress dateRange = new CellRangeAddress(1, 1, 0, titleMap.size() - 1);
		sheet.addMergedRegion(dateRange);
		HSSFRow dateRow = sheet.createRow(DATEHEAD_START_POSITION);
		dateRow.setHeight((short) 350);
		HSSFCell dateCell = dateRow.createCell(TITLE_START_POSITION);
		dateCell.setCellValue(new SimpleDateFormat("yyyy年MM月dd日").format(new Date()));
	}

	/**
	 * 创建表头行（第二行创建）
	 *
	 * @param titleMap
	 *            对象属性名称->表头显示名称
	 */
	private static void createHeadRow(Map<String, String> titleMap) {
		// 第1行创建
		/* HSSFRow headRow = sheet.createRow(HEAD_START_POSITION); */
		HSSFRow headRow = sheet.createRow(0);
		headRow.setHeight((short) 450);

		int i = 0;
		for (String entry : titleMap.keySet()) {
			HSSFCell headCell = headRow.createCell(i);

			headCell.setCellStyle(createCellStyle(workbook, (short) 10));

			headCell.setCellValue(titleMap.get(entry));
			sheet.setColumnWidth(i, 5000);
			i++;
		}
	}

	/**
	 * @param dataList
	 *            对象数据集合
	 * @param titleMap
	 *            表头信息
	 */
	private static void createContentRow(List<?> dataList, Map<String, String> titleMap) {
		try {
			int i = 0;
			for (Object obj : dataList) {
				/* HSSFRow textRow = sheet.createRow(CONTENT_START_POSITION + i); */
				HSSFRow textRow = sheet.createRow(1 + i);
				// 设置行高
				textRow.setHeight((short) 350);
				int j = 0;
				for (String entry : titleMap.keySet()) {
					String method = "get" + entry.substring(0, 1).toUpperCase() + entry.substring(1);
					Method m = obj.getClass().getMethod(method, (Class<?>[]) null);

					// 处理空列
					String value = "";
					if (m.invoke(obj, (Object[]) null) != null) {
						value = m.invoke(obj, (Object[]) null).toString();
					}

					HSSFCell textcell = textRow.createCell(j);
					// 列样式
					textcell.setCellStyle(cellAndRowCenter(workbook));
					textcell.setCellValue(value);
					j++;
				}
				i++;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 自动伸缩列（如非必要，请勿打开此方法，耗内存）
	 *
	 * @param size
	 *            列数
	 */
	private static void autoSizeColumn(Integer size) {
		for (int j = 0; j < size; j++) {
			sheet.autoSizeColumn(j);
		}
	}

	/**
	 * 列宽
	 * 
	 * @param size
	 *            row
	 */
	private static void fixedSizeColumn(Integer size) {
		for (int i = 0; i < size - 1; i++) {
			sheet.setColumnWidth(i, 3000);
		}
		sheet.setColumnWidth(size, 6500);
	}

	/**
	 * 设置居中 加 字体大小
	 * 
	 * @param workbook
	 *            workbook
	 * @param fontSize
	 *            字体大小
	 * @return HSSFCelStyle
	 */
	private static HSSFCellStyle createCellStyle(HSSFWorkbook workbook, short fontSize) {
		HSSFCellStyle style = workbook.createCellStyle();
		// 水平居中
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		// 垂直居中
		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		// 创建字体
		HSSFFont font = workbook.createFont();
		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		font.setFontHeightInPoints(fontSize);
		// 加载字体
		style.setFont(font);
		return style;
	}

	/**
	 * 列居中
	 * 
	 * @param workbook
	 *            workbook
	 * @return HSSFCelStyle
	 */
	private static HSSFCellStyle cellAndRowCenter(HSSFWorkbook workbook) {
		HSSFCellStyle style = workbook.createCellStyle();
		// 水平居中
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);
		// 垂直居中
		style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);
		return style;
	}

}
